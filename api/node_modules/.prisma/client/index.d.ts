
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model CommonPoint
 * 
 */
export type CommonPoint = $Result.DefaultSelection<Prisma.$CommonPointPayload>
/**
 * Model Rank
 * 
 */
export type Rank = $Result.DefaultSelection<Prisma.$RankPayload>
/**
 * Model SelectionUtilisateur
 * 
 */
export type SelectionUtilisateur = $Result.DefaultSelection<Prisma.$SelectionUtilisateurPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.commonPoint`: Exposes CRUD operations for the **CommonPoint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommonPoints
    * const commonPoints = await prisma.commonPoint.findMany()
    * ```
    */
  get commonPoint(): Prisma.CommonPointDelegate<ExtArgs>;

  /**
   * `prisma.rank`: Exposes CRUD operations for the **Rank** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ranks
    * const ranks = await prisma.rank.findMany()
    * ```
    */
  get rank(): Prisma.RankDelegate<ExtArgs>;

  /**
   * `prisma.selectionUtilisateur`: Exposes CRUD operations for the **SelectionUtilisateur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SelectionUtilisateurs
    * const selectionUtilisateurs = await prisma.selectionUtilisateur.findMany()
    * ```
    */
  get selectionUtilisateur(): Prisma.SelectionUtilisateurDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.10.2
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Session: 'Session',
    CommonPoint: 'CommonPoint',
    Rank: 'Rank',
    SelectionUtilisateur: 'SelectionUtilisateur'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'session' | 'commonPoint' | 'rank' | 'selectionUtilisateur'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      CommonPoint: {
        payload: Prisma.$CommonPointPayload<ExtArgs>
        fields: Prisma.CommonPointFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommonPointFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommonPointPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommonPointFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommonPointPayload>
          }
          findFirst: {
            args: Prisma.CommonPointFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommonPointPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommonPointFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommonPointPayload>
          }
          findMany: {
            args: Prisma.CommonPointFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommonPointPayload>[]
          }
          create: {
            args: Prisma.CommonPointCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommonPointPayload>
          }
          createMany: {
            args: Prisma.CommonPointCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CommonPointDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommonPointPayload>
          }
          update: {
            args: Prisma.CommonPointUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommonPointPayload>
          }
          deleteMany: {
            args: Prisma.CommonPointDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommonPointUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommonPointUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommonPointPayload>
          }
          aggregate: {
            args: Prisma.CommonPointAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCommonPoint>
          }
          groupBy: {
            args: Prisma.CommonPointGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommonPointGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommonPointCountArgs<ExtArgs>,
            result: $Utils.Optional<CommonPointCountAggregateOutputType> | number
          }
        }
      }
      Rank: {
        payload: Prisma.$RankPayload<ExtArgs>
        fields: Prisma.RankFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RankFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RankPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RankFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RankPayload>
          }
          findFirst: {
            args: Prisma.RankFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RankPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RankFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RankPayload>
          }
          findMany: {
            args: Prisma.RankFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RankPayload>[]
          }
          create: {
            args: Prisma.RankCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RankPayload>
          }
          createMany: {
            args: Prisma.RankCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RankDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RankPayload>
          }
          update: {
            args: Prisma.RankUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RankPayload>
          }
          deleteMany: {
            args: Prisma.RankDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RankUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RankUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RankPayload>
          }
          aggregate: {
            args: Prisma.RankAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRank>
          }
          groupBy: {
            args: Prisma.RankGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RankGroupByOutputType>[]
          }
          count: {
            args: Prisma.RankCountArgs<ExtArgs>,
            result: $Utils.Optional<RankCountAggregateOutputType> | number
          }
        }
      }
      SelectionUtilisateur: {
        payload: Prisma.$SelectionUtilisateurPayload<ExtArgs>
        fields: Prisma.SelectionUtilisateurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SelectionUtilisateurFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectionUtilisateurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SelectionUtilisateurFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectionUtilisateurPayload>
          }
          findFirst: {
            args: Prisma.SelectionUtilisateurFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectionUtilisateurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SelectionUtilisateurFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectionUtilisateurPayload>
          }
          findMany: {
            args: Prisma.SelectionUtilisateurFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectionUtilisateurPayload>[]
          }
          create: {
            args: Prisma.SelectionUtilisateurCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectionUtilisateurPayload>
          }
          createMany: {
            args: Prisma.SelectionUtilisateurCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SelectionUtilisateurDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectionUtilisateurPayload>
          }
          update: {
            args: Prisma.SelectionUtilisateurUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectionUtilisateurPayload>
          }
          deleteMany: {
            args: Prisma.SelectionUtilisateurDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SelectionUtilisateurUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SelectionUtilisateurUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectionUtilisateurPayload>
          }
          aggregate: {
            args: Prisma.SelectionUtilisateurAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSelectionUtilisateur>
          }
          groupBy: {
            args: Prisma.SelectionUtilisateurGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SelectionUtilisateurGroupByOutputType>[]
          }
          count: {
            args: Prisma.SelectionUtilisateurCountArgs<ExtArgs>,
            result: $Utils.Optional<SelectionUtilisateurCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    ranks: number
    selections: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    ranks?: boolean | UserCountOutputTypeCountRanksArgs
    selections?: boolean | UserCountOutputTypeCountSelectionsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRanksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSelectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SelectionUtilisateurWhereInput
  }



  /**
   * Count Type CommonPointCountOutputType
   */

  export type CommonPointCountOutputType = {
    selections: number
  }

  export type CommonPointCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    selections?: boolean | CommonPointCountOutputTypeCountSelectionsArgs
  }

  // Custom InputTypes

  /**
   * CommonPointCountOutputType without action
   */
  export type CommonPointCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommonPointCountOutputType
     */
    select?: CommonPointCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CommonPointCountOutputType without action
   */
  export type CommonPointCountOutputTypeCountSelectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SelectionUtilisateurWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    score: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    score: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    email: string | null
    tel: string | null
    entreprise: string | null
    poste: string | null
    role: string | null
    score: number | null
    dateInscription: Date | null
    qrCodeUrl: string | null
    qrToken: string | null
    lastLoginAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    email: string | null
    tel: string | null
    entreprise: string | null
    poste: string | null
    role: string | null
    score: number | null
    dateInscription: Date | null
    qrCodeUrl: string | null
    qrToken: string | null
    lastLoginAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    nom: number
    prenom: number
    email: number
    tel: number
    entreprise: number
    poste: number
    role: number
    score: number
    dateInscription: number
    qrCodeUrl: number
    qrToken: number
    lastLoginAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    score?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    score?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    tel?: true
    entreprise?: true
    poste?: true
    role?: true
    score?: true
    dateInscription?: true
    qrCodeUrl?: true
    qrToken?: true
    lastLoginAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    tel?: true
    entreprise?: true
    poste?: true
    role?: true
    score?: true
    dateInscription?: true
    qrCodeUrl?: true
    qrToken?: true
    lastLoginAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    tel?: true
    entreprise?: true
    poste?: true
    role?: true
    score?: true
    dateInscription?: true
    qrCodeUrl?: true
    qrToken?: true
    lastLoginAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    nom: string
    prenom: string
    email: string
    tel: string
    entreprise: string
    poste: string
    role: string
    score: number
    dateInscription: Date
    qrCodeUrl: string
    qrToken: string
    lastLoginAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    tel?: boolean
    entreprise?: boolean
    poste?: boolean
    role?: boolean
    score?: boolean
    dateInscription?: boolean
    qrCodeUrl?: boolean
    qrToken?: boolean
    lastLoginAt?: boolean
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    ranks?: boolean | User$ranksArgs<ExtArgs>
    selections?: boolean | User$selectionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    tel?: boolean
    entreprise?: boolean
    poste?: boolean
    role?: boolean
    score?: boolean
    dateInscription?: boolean
    qrCodeUrl?: boolean
    qrToken?: boolean
    lastLoginAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    ranks?: boolean | User$ranksArgs<ExtArgs>
    selections?: boolean | User$selectionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      ranks: Prisma.$RankPayload<ExtArgs>[]
      selections: Prisma.$SelectionUtilisateurPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      prenom: string
      email: string
      tel: string
      entreprise: string
      poste: string
      role: string
      score: number
      dateInscription: Date
      qrCodeUrl: string
      qrToken: string
      lastLoginAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findMany'> | Null>;

    ranks<T extends User$ranksArgs<ExtArgs> = {}>(args?: Subset<T, User$ranksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, 'findMany'> | Null>;

    selections<T extends User$selectionsArgs<ExtArgs> = {}>(args?: Subset<T, User$selectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SelectionUtilisateurPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly nom: FieldRef<"User", 'String'>
    readonly prenom: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly tel: FieldRef<"User", 'String'>
    readonly entreprise: FieldRef<"User", 'String'>
    readonly poste: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly score: FieldRef<"User", 'Int'>
    readonly dateInscription: FieldRef<"User", 'DateTime'>
    readonly qrCodeUrl: FieldRef<"User", 'String'>
    readonly qrToken: FieldRef<"User", 'String'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * User.ranks
   */
  export type User$ranksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankInclude<ExtArgs> | null
    where?: RankWhereInput
    orderBy?: RankOrderByWithRelationInput | RankOrderByWithRelationInput[]
    cursor?: RankWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RankScalarFieldEnum | RankScalarFieldEnum[]
  }


  /**
   * User.selections
   */
  export type User$selectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectionUtilisateur
     */
    select?: SelectionUtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SelectionUtilisateurInclude<ExtArgs> | null
    where?: SelectionUtilisateurWhereInput
    orderBy?: SelectionUtilisateurOrderByWithRelationInput | SelectionUtilisateurOrderByWithRelationInput[]
    cursor?: SelectionUtilisateurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SelectionUtilisateurScalarFieldEnum | SelectionUtilisateurScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    status: string | null
    createdAt: Date | null
    userId: number | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    status: string | null
    createdAt: Date | null
    userId: number | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    status: number
    createdAt: number
    userId: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    userId?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    userId?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: number
    status: string
    createdAt: Date
    userId: number
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    status?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      status: string
      createdAt: Date
      userId: number
    }, ExtArgs["result"]["session"]>
    composites: {}
  }


  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionCreateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'Int'>
    readonly status: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly userId: FieldRef<"Session", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
  }



  /**
   * Model CommonPoint
   */

  export type AggregateCommonPoint = {
    _count: CommonPointCountAggregateOutputType | null
    _avg: CommonPointAvgAggregateOutputType | null
    _sum: CommonPointSumAggregateOutputType | null
    _min: CommonPointMinAggregateOutputType | null
    _max: CommonPointMaxAggregateOutputType | null
  }

  export type CommonPointAvgAggregateOutputType = {
    id: number | null
  }

  export type CommonPointSumAggregateOutputType = {
    id: number | null
  }

  export type CommonPointMinAggregateOutputType = {
    id: number | null
    contenu: string | null
  }

  export type CommonPointMaxAggregateOutputType = {
    id: number | null
    contenu: string | null
  }

  export type CommonPointCountAggregateOutputType = {
    id: number
    contenu: number
    _all: number
  }


  export type CommonPointAvgAggregateInputType = {
    id?: true
  }

  export type CommonPointSumAggregateInputType = {
    id?: true
  }

  export type CommonPointMinAggregateInputType = {
    id?: true
    contenu?: true
  }

  export type CommonPointMaxAggregateInputType = {
    id?: true
    contenu?: true
  }

  export type CommonPointCountAggregateInputType = {
    id?: true
    contenu?: true
    _all?: true
  }

  export type CommonPointAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommonPoint to aggregate.
     */
    where?: CommonPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommonPoints to fetch.
     */
    orderBy?: CommonPointOrderByWithRelationInput | CommonPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommonPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommonPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommonPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommonPoints
    **/
    _count?: true | CommonPointCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommonPointAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommonPointSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommonPointMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommonPointMaxAggregateInputType
  }

  export type GetCommonPointAggregateType<T extends CommonPointAggregateArgs> = {
        [P in keyof T & keyof AggregateCommonPoint]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommonPoint[P]>
      : GetScalarType<T[P], AggregateCommonPoint[P]>
  }




  export type CommonPointGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommonPointWhereInput
    orderBy?: CommonPointOrderByWithAggregationInput | CommonPointOrderByWithAggregationInput[]
    by: CommonPointScalarFieldEnum[] | CommonPointScalarFieldEnum
    having?: CommonPointScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommonPointCountAggregateInputType | true
    _avg?: CommonPointAvgAggregateInputType
    _sum?: CommonPointSumAggregateInputType
    _min?: CommonPointMinAggregateInputType
    _max?: CommonPointMaxAggregateInputType
  }

  export type CommonPointGroupByOutputType = {
    id: number
    contenu: string
    _count: CommonPointCountAggregateOutputType | null
    _avg: CommonPointAvgAggregateOutputType | null
    _sum: CommonPointSumAggregateOutputType | null
    _min: CommonPointMinAggregateOutputType | null
    _max: CommonPointMaxAggregateOutputType | null
  }

  type GetCommonPointGroupByPayload<T extends CommonPointGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommonPointGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommonPointGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommonPointGroupByOutputType[P]>
            : GetScalarType<T[P], CommonPointGroupByOutputType[P]>
        }
      >
    >


  export type CommonPointSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contenu?: boolean
    selections?: boolean | CommonPoint$selectionsArgs<ExtArgs>
    _count?: boolean | CommonPointCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commonPoint"]>

  export type CommonPointSelectScalar = {
    id?: boolean
    contenu?: boolean
  }

  export type CommonPointInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    selections?: boolean | CommonPoint$selectionsArgs<ExtArgs>
    _count?: boolean | CommonPointCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CommonPointPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommonPoint"
    objects: {
      selections: Prisma.$SelectionUtilisateurPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      contenu: string
    }, ExtArgs["result"]["commonPoint"]>
    composites: {}
  }


  type CommonPointGetPayload<S extends boolean | null | undefined | CommonPointDefaultArgs> = $Result.GetResult<Prisma.$CommonPointPayload, S>

  type CommonPointCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommonPointFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommonPointCountAggregateInputType | true
    }

  export interface CommonPointDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommonPoint'], meta: { name: 'CommonPoint' } }
    /**
     * Find zero or one CommonPoint that matches the filter.
     * @param {CommonPointFindUniqueArgs} args - Arguments to find a CommonPoint
     * @example
     * // Get one CommonPoint
     * const commonPoint = await prisma.commonPoint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommonPointFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommonPointFindUniqueArgs<ExtArgs>>
    ): Prisma__CommonPointClient<$Result.GetResult<Prisma.$CommonPointPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CommonPoint that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommonPointFindUniqueOrThrowArgs} args - Arguments to find a CommonPoint
     * @example
     * // Get one CommonPoint
     * const commonPoint = await prisma.commonPoint.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommonPointFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommonPointFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommonPointClient<$Result.GetResult<Prisma.$CommonPointPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CommonPoint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommonPointFindFirstArgs} args - Arguments to find a CommonPoint
     * @example
     * // Get one CommonPoint
     * const commonPoint = await prisma.commonPoint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommonPointFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommonPointFindFirstArgs<ExtArgs>>
    ): Prisma__CommonPointClient<$Result.GetResult<Prisma.$CommonPointPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CommonPoint that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommonPointFindFirstOrThrowArgs} args - Arguments to find a CommonPoint
     * @example
     * // Get one CommonPoint
     * const commonPoint = await prisma.commonPoint.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommonPointFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommonPointFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommonPointClient<$Result.GetResult<Prisma.$CommonPointPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CommonPoints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommonPointFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommonPoints
     * const commonPoints = await prisma.commonPoint.findMany()
     * 
     * // Get first 10 CommonPoints
     * const commonPoints = await prisma.commonPoint.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commonPointWithIdOnly = await prisma.commonPoint.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommonPointFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommonPointFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommonPointPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CommonPoint.
     * @param {CommonPointCreateArgs} args - Arguments to create a CommonPoint.
     * @example
     * // Create one CommonPoint
     * const CommonPoint = await prisma.commonPoint.create({
     *   data: {
     *     // ... data to create a CommonPoint
     *   }
     * })
     * 
    **/
    create<T extends CommonPointCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommonPointCreateArgs<ExtArgs>>
    ): Prisma__CommonPointClient<$Result.GetResult<Prisma.$CommonPointPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CommonPoints.
     *     @param {CommonPointCreateManyArgs} args - Arguments to create many CommonPoints.
     *     @example
     *     // Create many CommonPoints
     *     const commonPoint = await prisma.commonPoint.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommonPointCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommonPointCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CommonPoint.
     * @param {CommonPointDeleteArgs} args - Arguments to delete one CommonPoint.
     * @example
     * // Delete one CommonPoint
     * const CommonPoint = await prisma.commonPoint.delete({
     *   where: {
     *     // ... filter to delete one CommonPoint
     *   }
     * })
     * 
    **/
    delete<T extends CommonPointDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommonPointDeleteArgs<ExtArgs>>
    ): Prisma__CommonPointClient<$Result.GetResult<Prisma.$CommonPointPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CommonPoint.
     * @param {CommonPointUpdateArgs} args - Arguments to update one CommonPoint.
     * @example
     * // Update one CommonPoint
     * const commonPoint = await prisma.commonPoint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommonPointUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommonPointUpdateArgs<ExtArgs>>
    ): Prisma__CommonPointClient<$Result.GetResult<Prisma.$CommonPointPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CommonPoints.
     * @param {CommonPointDeleteManyArgs} args - Arguments to filter CommonPoints to delete.
     * @example
     * // Delete a few CommonPoints
     * const { count } = await prisma.commonPoint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommonPointDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommonPointDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommonPoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommonPointUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommonPoints
     * const commonPoint = await prisma.commonPoint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommonPointUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommonPointUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommonPoint.
     * @param {CommonPointUpsertArgs} args - Arguments to update or create a CommonPoint.
     * @example
     * // Update or create a CommonPoint
     * const commonPoint = await prisma.commonPoint.upsert({
     *   create: {
     *     // ... data to create a CommonPoint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommonPoint we want to update
     *   }
     * })
    **/
    upsert<T extends CommonPointUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommonPointUpsertArgs<ExtArgs>>
    ): Prisma__CommonPointClient<$Result.GetResult<Prisma.$CommonPointPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CommonPoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommonPointCountArgs} args - Arguments to filter CommonPoints to count.
     * @example
     * // Count the number of CommonPoints
     * const count = await prisma.commonPoint.count({
     *   where: {
     *     // ... the filter for the CommonPoints we want to count
     *   }
     * })
    **/
    count<T extends CommonPointCountArgs>(
      args?: Subset<T, CommonPointCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommonPointCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommonPoint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommonPointAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommonPointAggregateArgs>(args: Subset<T, CommonPointAggregateArgs>): Prisma.PrismaPromise<GetCommonPointAggregateType<T>>

    /**
     * Group by CommonPoint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommonPointGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommonPointGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommonPointGroupByArgs['orderBy'] }
        : { orderBy?: CommonPointGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommonPointGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommonPointGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommonPoint model
   */
  readonly fields: CommonPointFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommonPoint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommonPointClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    selections<T extends CommonPoint$selectionsArgs<ExtArgs> = {}>(args?: Subset<T, CommonPoint$selectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SelectionUtilisateurPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CommonPoint model
   */ 
  interface CommonPointFieldRefs {
    readonly id: FieldRef<"CommonPoint", 'Int'>
    readonly contenu: FieldRef<"CommonPoint", 'String'>
  }
    

  // Custom InputTypes

  /**
   * CommonPoint findUnique
   */
  export type CommonPointFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommonPoint
     */
    select?: CommonPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommonPointInclude<ExtArgs> | null
    /**
     * Filter, which CommonPoint to fetch.
     */
    where: CommonPointWhereUniqueInput
  }


  /**
   * CommonPoint findUniqueOrThrow
   */
  export type CommonPointFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommonPoint
     */
    select?: CommonPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommonPointInclude<ExtArgs> | null
    /**
     * Filter, which CommonPoint to fetch.
     */
    where: CommonPointWhereUniqueInput
  }


  /**
   * CommonPoint findFirst
   */
  export type CommonPointFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommonPoint
     */
    select?: CommonPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommonPointInclude<ExtArgs> | null
    /**
     * Filter, which CommonPoint to fetch.
     */
    where?: CommonPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommonPoints to fetch.
     */
    orderBy?: CommonPointOrderByWithRelationInput | CommonPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommonPoints.
     */
    cursor?: CommonPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommonPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommonPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommonPoints.
     */
    distinct?: CommonPointScalarFieldEnum | CommonPointScalarFieldEnum[]
  }


  /**
   * CommonPoint findFirstOrThrow
   */
  export type CommonPointFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommonPoint
     */
    select?: CommonPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommonPointInclude<ExtArgs> | null
    /**
     * Filter, which CommonPoint to fetch.
     */
    where?: CommonPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommonPoints to fetch.
     */
    orderBy?: CommonPointOrderByWithRelationInput | CommonPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommonPoints.
     */
    cursor?: CommonPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommonPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommonPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommonPoints.
     */
    distinct?: CommonPointScalarFieldEnum | CommonPointScalarFieldEnum[]
  }


  /**
   * CommonPoint findMany
   */
  export type CommonPointFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommonPoint
     */
    select?: CommonPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommonPointInclude<ExtArgs> | null
    /**
     * Filter, which CommonPoints to fetch.
     */
    where?: CommonPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommonPoints to fetch.
     */
    orderBy?: CommonPointOrderByWithRelationInput | CommonPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommonPoints.
     */
    cursor?: CommonPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommonPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommonPoints.
     */
    skip?: number
    distinct?: CommonPointScalarFieldEnum | CommonPointScalarFieldEnum[]
  }


  /**
   * CommonPoint create
   */
  export type CommonPointCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommonPoint
     */
    select?: CommonPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommonPointInclude<ExtArgs> | null
    /**
     * The data needed to create a CommonPoint.
     */
    data: XOR<CommonPointCreateInput, CommonPointUncheckedCreateInput>
  }


  /**
   * CommonPoint createMany
   */
  export type CommonPointCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommonPoints.
     */
    data: CommonPointCreateManyInput | CommonPointCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CommonPoint update
   */
  export type CommonPointUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommonPoint
     */
    select?: CommonPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommonPointInclude<ExtArgs> | null
    /**
     * The data needed to update a CommonPoint.
     */
    data: XOR<CommonPointUpdateInput, CommonPointUncheckedUpdateInput>
    /**
     * Choose, which CommonPoint to update.
     */
    where: CommonPointWhereUniqueInput
  }


  /**
   * CommonPoint updateMany
   */
  export type CommonPointUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommonPoints.
     */
    data: XOR<CommonPointUpdateManyMutationInput, CommonPointUncheckedUpdateManyInput>
    /**
     * Filter which CommonPoints to update
     */
    where?: CommonPointWhereInput
  }


  /**
   * CommonPoint upsert
   */
  export type CommonPointUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommonPoint
     */
    select?: CommonPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommonPointInclude<ExtArgs> | null
    /**
     * The filter to search for the CommonPoint to update in case it exists.
     */
    where: CommonPointWhereUniqueInput
    /**
     * In case the CommonPoint found by the `where` argument doesn't exist, create a new CommonPoint with this data.
     */
    create: XOR<CommonPointCreateInput, CommonPointUncheckedCreateInput>
    /**
     * In case the CommonPoint was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommonPointUpdateInput, CommonPointUncheckedUpdateInput>
  }


  /**
   * CommonPoint delete
   */
  export type CommonPointDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommonPoint
     */
    select?: CommonPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommonPointInclude<ExtArgs> | null
    /**
     * Filter which CommonPoint to delete.
     */
    where: CommonPointWhereUniqueInput
  }


  /**
   * CommonPoint deleteMany
   */
  export type CommonPointDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommonPoints to delete
     */
    where?: CommonPointWhereInput
  }


  /**
   * CommonPoint.selections
   */
  export type CommonPoint$selectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectionUtilisateur
     */
    select?: SelectionUtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SelectionUtilisateurInclude<ExtArgs> | null
    where?: SelectionUtilisateurWhereInput
    orderBy?: SelectionUtilisateurOrderByWithRelationInput | SelectionUtilisateurOrderByWithRelationInput[]
    cursor?: SelectionUtilisateurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SelectionUtilisateurScalarFieldEnum | SelectionUtilisateurScalarFieldEnum[]
  }


  /**
   * CommonPoint without action
   */
  export type CommonPointDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommonPoint
     */
    select?: CommonPointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommonPointInclude<ExtArgs> | null
  }



  /**
   * Model Rank
   */

  export type AggregateRank = {
    _count: RankCountAggregateOutputType | null
    _avg: RankAvgAggregateOutputType | null
    _sum: RankSumAggregateOutputType | null
    _min: RankMinAggregateOutputType | null
    _max: RankMaxAggregateOutputType | null
  }

  export type RankAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    score: number | null
    position: number | null
  }

  export type RankSumAggregateOutputType = {
    id: number | null
    userId: number | null
    score: number | null
    position: number | null
  }

  export type RankMinAggregateOutputType = {
    id: number | null
    userId: number | null
    score: number | null
    position: number | null
  }

  export type RankMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    score: number | null
    position: number | null
  }

  export type RankCountAggregateOutputType = {
    id: number
    userId: number
    score: number
    position: number
    _all: number
  }


  export type RankAvgAggregateInputType = {
    id?: true
    userId?: true
    score?: true
    position?: true
  }

  export type RankSumAggregateInputType = {
    id?: true
    userId?: true
    score?: true
    position?: true
  }

  export type RankMinAggregateInputType = {
    id?: true
    userId?: true
    score?: true
    position?: true
  }

  export type RankMaxAggregateInputType = {
    id?: true
    userId?: true
    score?: true
    position?: true
  }

  export type RankCountAggregateInputType = {
    id?: true
    userId?: true
    score?: true
    position?: true
    _all?: true
  }

  export type RankAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rank to aggregate.
     */
    where?: RankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ranks to fetch.
     */
    orderBy?: RankOrderByWithRelationInput | RankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ranks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ranks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ranks
    **/
    _count?: true | RankCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RankAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RankSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RankMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RankMaxAggregateInputType
  }

  export type GetRankAggregateType<T extends RankAggregateArgs> = {
        [P in keyof T & keyof AggregateRank]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRank[P]>
      : GetScalarType<T[P], AggregateRank[P]>
  }




  export type RankGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankWhereInput
    orderBy?: RankOrderByWithAggregationInput | RankOrderByWithAggregationInput[]
    by: RankScalarFieldEnum[] | RankScalarFieldEnum
    having?: RankScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RankCountAggregateInputType | true
    _avg?: RankAvgAggregateInputType
    _sum?: RankSumAggregateInputType
    _min?: RankMinAggregateInputType
    _max?: RankMaxAggregateInputType
  }

  export type RankGroupByOutputType = {
    id: number
    userId: number
    score: number
    position: number
    _count: RankCountAggregateOutputType | null
    _avg: RankAvgAggregateOutputType | null
    _sum: RankSumAggregateOutputType | null
    _min: RankMinAggregateOutputType | null
    _max: RankMaxAggregateOutputType | null
  }

  type GetRankGroupByPayload<T extends RankGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RankGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RankGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RankGroupByOutputType[P]>
            : GetScalarType<T[P], RankGroupByOutputType[P]>
        }
      >
    >


  export type RankSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    score?: boolean
    position?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rank"]>

  export type RankSelectScalar = {
    id?: boolean
    userId?: boolean
    score?: boolean
    position?: boolean
  }

  export type RankInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $RankPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rank"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      score: number
      position: number
    }, ExtArgs["result"]["rank"]>
    composites: {}
  }


  type RankGetPayload<S extends boolean | null | undefined | RankDefaultArgs> = $Result.GetResult<Prisma.$RankPayload, S>

  type RankCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RankFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RankCountAggregateInputType | true
    }

  export interface RankDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rank'], meta: { name: 'Rank' } }
    /**
     * Find zero or one Rank that matches the filter.
     * @param {RankFindUniqueArgs} args - Arguments to find a Rank
     * @example
     * // Get one Rank
     * const rank = await prisma.rank.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RankFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RankFindUniqueArgs<ExtArgs>>
    ): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Rank that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RankFindUniqueOrThrowArgs} args - Arguments to find a Rank
     * @example
     * // Get one Rank
     * const rank = await prisma.rank.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RankFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RankFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Rank that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankFindFirstArgs} args - Arguments to find a Rank
     * @example
     * // Get one Rank
     * const rank = await prisma.rank.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RankFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RankFindFirstArgs<ExtArgs>>
    ): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Rank that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankFindFirstOrThrowArgs} args - Arguments to find a Rank
     * @example
     * // Get one Rank
     * const rank = await prisma.rank.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RankFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RankFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ranks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ranks
     * const ranks = await prisma.rank.findMany()
     * 
     * // Get first 10 Ranks
     * const ranks = await prisma.rank.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rankWithIdOnly = await prisma.rank.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RankFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RankFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Rank.
     * @param {RankCreateArgs} args - Arguments to create a Rank.
     * @example
     * // Create one Rank
     * const Rank = await prisma.rank.create({
     *   data: {
     *     // ... data to create a Rank
     *   }
     * })
     * 
    **/
    create<T extends RankCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RankCreateArgs<ExtArgs>>
    ): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ranks.
     *     @param {RankCreateManyArgs} args - Arguments to create many Ranks.
     *     @example
     *     // Create many Ranks
     *     const rank = await prisma.rank.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RankCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RankCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rank.
     * @param {RankDeleteArgs} args - Arguments to delete one Rank.
     * @example
     * // Delete one Rank
     * const Rank = await prisma.rank.delete({
     *   where: {
     *     // ... filter to delete one Rank
     *   }
     * })
     * 
    **/
    delete<T extends RankDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RankDeleteArgs<ExtArgs>>
    ): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Rank.
     * @param {RankUpdateArgs} args - Arguments to update one Rank.
     * @example
     * // Update one Rank
     * const rank = await prisma.rank.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RankUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RankUpdateArgs<ExtArgs>>
    ): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ranks.
     * @param {RankDeleteManyArgs} args - Arguments to filter Ranks to delete.
     * @example
     * // Delete a few Ranks
     * const { count } = await prisma.rank.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RankDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RankDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ranks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ranks
     * const rank = await prisma.rank.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RankUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RankUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rank.
     * @param {RankUpsertArgs} args - Arguments to update or create a Rank.
     * @example
     * // Update or create a Rank
     * const rank = await prisma.rank.upsert({
     *   create: {
     *     // ... data to create a Rank
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rank we want to update
     *   }
     * })
    **/
    upsert<T extends RankUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RankUpsertArgs<ExtArgs>>
    ): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Ranks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankCountArgs} args - Arguments to filter Ranks to count.
     * @example
     * // Count the number of Ranks
     * const count = await prisma.rank.count({
     *   where: {
     *     // ... the filter for the Ranks we want to count
     *   }
     * })
    **/
    count<T extends RankCountArgs>(
      args?: Subset<T, RankCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RankCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RankAggregateArgs>(args: Subset<T, RankAggregateArgs>): Prisma.PrismaPromise<GetRankAggregateType<T>>

    /**
     * Group by Rank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RankGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RankGroupByArgs['orderBy'] }
        : { orderBy?: RankGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RankGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRankGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rank model
   */
  readonly fields: RankFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rank.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RankClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Rank model
   */ 
  interface RankFieldRefs {
    readonly id: FieldRef<"Rank", 'Int'>
    readonly userId: FieldRef<"Rank", 'Int'>
    readonly score: FieldRef<"Rank", 'Int'>
    readonly position: FieldRef<"Rank", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Rank findUnique
   */
  export type RankFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * Filter, which Rank to fetch.
     */
    where: RankWhereUniqueInput
  }


  /**
   * Rank findUniqueOrThrow
   */
  export type RankFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * Filter, which Rank to fetch.
     */
    where: RankWhereUniqueInput
  }


  /**
   * Rank findFirst
   */
  export type RankFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * Filter, which Rank to fetch.
     */
    where?: RankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ranks to fetch.
     */
    orderBy?: RankOrderByWithRelationInput | RankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ranks.
     */
    cursor?: RankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ranks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ranks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ranks.
     */
    distinct?: RankScalarFieldEnum | RankScalarFieldEnum[]
  }


  /**
   * Rank findFirstOrThrow
   */
  export type RankFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * Filter, which Rank to fetch.
     */
    where?: RankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ranks to fetch.
     */
    orderBy?: RankOrderByWithRelationInput | RankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ranks.
     */
    cursor?: RankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ranks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ranks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ranks.
     */
    distinct?: RankScalarFieldEnum | RankScalarFieldEnum[]
  }


  /**
   * Rank findMany
   */
  export type RankFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * Filter, which Ranks to fetch.
     */
    where?: RankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ranks to fetch.
     */
    orderBy?: RankOrderByWithRelationInput | RankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ranks.
     */
    cursor?: RankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ranks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ranks.
     */
    skip?: number
    distinct?: RankScalarFieldEnum | RankScalarFieldEnum[]
  }


  /**
   * Rank create
   */
  export type RankCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * The data needed to create a Rank.
     */
    data: XOR<RankCreateInput, RankUncheckedCreateInput>
  }


  /**
   * Rank createMany
   */
  export type RankCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ranks.
     */
    data: RankCreateManyInput | RankCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Rank update
   */
  export type RankUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * The data needed to update a Rank.
     */
    data: XOR<RankUpdateInput, RankUncheckedUpdateInput>
    /**
     * Choose, which Rank to update.
     */
    where: RankWhereUniqueInput
  }


  /**
   * Rank updateMany
   */
  export type RankUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ranks.
     */
    data: XOR<RankUpdateManyMutationInput, RankUncheckedUpdateManyInput>
    /**
     * Filter which Ranks to update
     */
    where?: RankWhereInput
  }


  /**
   * Rank upsert
   */
  export type RankUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * The filter to search for the Rank to update in case it exists.
     */
    where: RankWhereUniqueInput
    /**
     * In case the Rank found by the `where` argument doesn't exist, create a new Rank with this data.
     */
    create: XOR<RankCreateInput, RankUncheckedCreateInput>
    /**
     * In case the Rank was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RankUpdateInput, RankUncheckedUpdateInput>
  }


  /**
   * Rank delete
   */
  export type RankDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * Filter which Rank to delete.
     */
    where: RankWhereUniqueInput
  }


  /**
   * Rank deleteMany
   */
  export type RankDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ranks to delete
     */
    where?: RankWhereInput
  }


  /**
   * Rank without action
   */
  export type RankDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RankInclude<ExtArgs> | null
  }



  /**
   * Model SelectionUtilisateur
   */

  export type AggregateSelectionUtilisateur = {
    _count: SelectionUtilisateurCountAggregateOutputType | null
    _avg: SelectionUtilisateurAvgAggregateOutputType | null
    _sum: SelectionUtilisateurSumAggregateOutputType | null
    _min: SelectionUtilisateurMinAggregateOutputType | null
    _max: SelectionUtilisateurMaxAggregateOutputType | null
  }

  export type SelectionUtilisateurAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    userIdSelect: number | null
    commonPointId: number | null
  }

  export type SelectionUtilisateurSumAggregateOutputType = {
    id: number | null
    userId: number | null
    userIdSelect: number | null
    commonPointId: number | null
  }

  export type SelectionUtilisateurMinAggregateOutputType = {
    id: number | null
    userId: number | null
    userIdSelect: number | null
    commonPointId: number | null
  }

  export type SelectionUtilisateurMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    userIdSelect: number | null
    commonPointId: number | null
  }

  export type SelectionUtilisateurCountAggregateOutputType = {
    id: number
    userId: number
    userIdSelect: number
    commonPointId: number
    _all: number
  }


  export type SelectionUtilisateurAvgAggregateInputType = {
    id?: true
    userId?: true
    userIdSelect?: true
    commonPointId?: true
  }

  export type SelectionUtilisateurSumAggregateInputType = {
    id?: true
    userId?: true
    userIdSelect?: true
    commonPointId?: true
  }

  export type SelectionUtilisateurMinAggregateInputType = {
    id?: true
    userId?: true
    userIdSelect?: true
    commonPointId?: true
  }

  export type SelectionUtilisateurMaxAggregateInputType = {
    id?: true
    userId?: true
    userIdSelect?: true
    commonPointId?: true
  }

  export type SelectionUtilisateurCountAggregateInputType = {
    id?: true
    userId?: true
    userIdSelect?: true
    commonPointId?: true
    _all?: true
  }

  export type SelectionUtilisateurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SelectionUtilisateur to aggregate.
     */
    where?: SelectionUtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SelectionUtilisateurs to fetch.
     */
    orderBy?: SelectionUtilisateurOrderByWithRelationInput | SelectionUtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SelectionUtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SelectionUtilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SelectionUtilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SelectionUtilisateurs
    **/
    _count?: true | SelectionUtilisateurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SelectionUtilisateurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SelectionUtilisateurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SelectionUtilisateurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SelectionUtilisateurMaxAggregateInputType
  }

  export type GetSelectionUtilisateurAggregateType<T extends SelectionUtilisateurAggregateArgs> = {
        [P in keyof T & keyof AggregateSelectionUtilisateur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSelectionUtilisateur[P]>
      : GetScalarType<T[P], AggregateSelectionUtilisateur[P]>
  }




  export type SelectionUtilisateurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SelectionUtilisateurWhereInput
    orderBy?: SelectionUtilisateurOrderByWithAggregationInput | SelectionUtilisateurOrderByWithAggregationInput[]
    by: SelectionUtilisateurScalarFieldEnum[] | SelectionUtilisateurScalarFieldEnum
    having?: SelectionUtilisateurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SelectionUtilisateurCountAggregateInputType | true
    _avg?: SelectionUtilisateurAvgAggregateInputType
    _sum?: SelectionUtilisateurSumAggregateInputType
    _min?: SelectionUtilisateurMinAggregateInputType
    _max?: SelectionUtilisateurMaxAggregateInputType
  }

  export type SelectionUtilisateurGroupByOutputType = {
    id: number
    userId: number
    userIdSelect: number
    commonPointId: number
    _count: SelectionUtilisateurCountAggregateOutputType | null
    _avg: SelectionUtilisateurAvgAggregateOutputType | null
    _sum: SelectionUtilisateurSumAggregateOutputType | null
    _min: SelectionUtilisateurMinAggregateOutputType | null
    _max: SelectionUtilisateurMaxAggregateOutputType | null
  }

  type GetSelectionUtilisateurGroupByPayload<T extends SelectionUtilisateurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SelectionUtilisateurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SelectionUtilisateurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SelectionUtilisateurGroupByOutputType[P]>
            : GetScalarType<T[P], SelectionUtilisateurGroupByOutputType[P]>
        }
      >
    >


  export type SelectionUtilisateurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    userIdSelect?: boolean
    commonPointId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    commonPoint?: boolean | CommonPointDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["selectionUtilisateur"]>

  export type SelectionUtilisateurSelectScalar = {
    id?: boolean
    userId?: boolean
    userIdSelect?: boolean
    commonPointId?: boolean
  }

  export type SelectionUtilisateurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    commonPoint?: boolean | CommonPointDefaultArgs<ExtArgs>
  }


  export type $SelectionUtilisateurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SelectionUtilisateur"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      commonPoint: Prisma.$CommonPointPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      userIdSelect: number
      commonPointId: number
    }, ExtArgs["result"]["selectionUtilisateur"]>
    composites: {}
  }


  type SelectionUtilisateurGetPayload<S extends boolean | null | undefined | SelectionUtilisateurDefaultArgs> = $Result.GetResult<Prisma.$SelectionUtilisateurPayload, S>

  type SelectionUtilisateurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SelectionUtilisateurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SelectionUtilisateurCountAggregateInputType | true
    }

  export interface SelectionUtilisateurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SelectionUtilisateur'], meta: { name: 'SelectionUtilisateur' } }
    /**
     * Find zero or one SelectionUtilisateur that matches the filter.
     * @param {SelectionUtilisateurFindUniqueArgs} args - Arguments to find a SelectionUtilisateur
     * @example
     * // Get one SelectionUtilisateur
     * const selectionUtilisateur = await prisma.selectionUtilisateur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SelectionUtilisateurFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SelectionUtilisateurFindUniqueArgs<ExtArgs>>
    ): Prisma__SelectionUtilisateurClient<$Result.GetResult<Prisma.$SelectionUtilisateurPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SelectionUtilisateur that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SelectionUtilisateurFindUniqueOrThrowArgs} args - Arguments to find a SelectionUtilisateur
     * @example
     * // Get one SelectionUtilisateur
     * const selectionUtilisateur = await prisma.selectionUtilisateur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SelectionUtilisateurFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SelectionUtilisateurFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SelectionUtilisateurClient<$Result.GetResult<Prisma.$SelectionUtilisateurPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SelectionUtilisateur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectionUtilisateurFindFirstArgs} args - Arguments to find a SelectionUtilisateur
     * @example
     * // Get one SelectionUtilisateur
     * const selectionUtilisateur = await prisma.selectionUtilisateur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SelectionUtilisateurFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SelectionUtilisateurFindFirstArgs<ExtArgs>>
    ): Prisma__SelectionUtilisateurClient<$Result.GetResult<Prisma.$SelectionUtilisateurPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SelectionUtilisateur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectionUtilisateurFindFirstOrThrowArgs} args - Arguments to find a SelectionUtilisateur
     * @example
     * // Get one SelectionUtilisateur
     * const selectionUtilisateur = await prisma.selectionUtilisateur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SelectionUtilisateurFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SelectionUtilisateurFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SelectionUtilisateurClient<$Result.GetResult<Prisma.$SelectionUtilisateurPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SelectionUtilisateurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectionUtilisateurFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SelectionUtilisateurs
     * const selectionUtilisateurs = await prisma.selectionUtilisateur.findMany()
     * 
     * // Get first 10 SelectionUtilisateurs
     * const selectionUtilisateurs = await prisma.selectionUtilisateur.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const selectionUtilisateurWithIdOnly = await prisma.selectionUtilisateur.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SelectionUtilisateurFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SelectionUtilisateurFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SelectionUtilisateurPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SelectionUtilisateur.
     * @param {SelectionUtilisateurCreateArgs} args - Arguments to create a SelectionUtilisateur.
     * @example
     * // Create one SelectionUtilisateur
     * const SelectionUtilisateur = await prisma.selectionUtilisateur.create({
     *   data: {
     *     // ... data to create a SelectionUtilisateur
     *   }
     * })
     * 
    **/
    create<T extends SelectionUtilisateurCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SelectionUtilisateurCreateArgs<ExtArgs>>
    ): Prisma__SelectionUtilisateurClient<$Result.GetResult<Prisma.$SelectionUtilisateurPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SelectionUtilisateurs.
     *     @param {SelectionUtilisateurCreateManyArgs} args - Arguments to create many SelectionUtilisateurs.
     *     @example
     *     // Create many SelectionUtilisateurs
     *     const selectionUtilisateur = await prisma.selectionUtilisateur.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SelectionUtilisateurCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SelectionUtilisateurCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SelectionUtilisateur.
     * @param {SelectionUtilisateurDeleteArgs} args - Arguments to delete one SelectionUtilisateur.
     * @example
     * // Delete one SelectionUtilisateur
     * const SelectionUtilisateur = await prisma.selectionUtilisateur.delete({
     *   where: {
     *     // ... filter to delete one SelectionUtilisateur
     *   }
     * })
     * 
    **/
    delete<T extends SelectionUtilisateurDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SelectionUtilisateurDeleteArgs<ExtArgs>>
    ): Prisma__SelectionUtilisateurClient<$Result.GetResult<Prisma.$SelectionUtilisateurPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SelectionUtilisateur.
     * @param {SelectionUtilisateurUpdateArgs} args - Arguments to update one SelectionUtilisateur.
     * @example
     * // Update one SelectionUtilisateur
     * const selectionUtilisateur = await prisma.selectionUtilisateur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SelectionUtilisateurUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SelectionUtilisateurUpdateArgs<ExtArgs>>
    ): Prisma__SelectionUtilisateurClient<$Result.GetResult<Prisma.$SelectionUtilisateurPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SelectionUtilisateurs.
     * @param {SelectionUtilisateurDeleteManyArgs} args - Arguments to filter SelectionUtilisateurs to delete.
     * @example
     * // Delete a few SelectionUtilisateurs
     * const { count } = await prisma.selectionUtilisateur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SelectionUtilisateurDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SelectionUtilisateurDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SelectionUtilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectionUtilisateurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SelectionUtilisateurs
     * const selectionUtilisateur = await prisma.selectionUtilisateur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SelectionUtilisateurUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SelectionUtilisateurUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SelectionUtilisateur.
     * @param {SelectionUtilisateurUpsertArgs} args - Arguments to update or create a SelectionUtilisateur.
     * @example
     * // Update or create a SelectionUtilisateur
     * const selectionUtilisateur = await prisma.selectionUtilisateur.upsert({
     *   create: {
     *     // ... data to create a SelectionUtilisateur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SelectionUtilisateur we want to update
     *   }
     * })
    **/
    upsert<T extends SelectionUtilisateurUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SelectionUtilisateurUpsertArgs<ExtArgs>>
    ): Prisma__SelectionUtilisateurClient<$Result.GetResult<Prisma.$SelectionUtilisateurPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SelectionUtilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectionUtilisateurCountArgs} args - Arguments to filter SelectionUtilisateurs to count.
     * @example
     * // Count the number of SelectionUtilisateurs
     * const count = await prisma.selectionUtilisateur.count({
     *   where: {
     *     // ... the filter for the SelectionUtilisateurs we want to count
     *   }
     * })
    **/
    count<T extends SelectionUtilisateurCountArgs>(
      args?: Subset<T, SelectionUtilisateurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SelectionUtilisateurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SelectionUtilisateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectionUtilisateurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SelectionUtilisateurAggregateArgs>(args: Subset<T, SelectionUtilisateurAggregateArgs>): Prisma.PrismaPromise<GetSelectionUtilisateurAggregateType<T>>

    /**
     * Group by SelectionUtilisateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectionUtilisateurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SelectionUtilisateurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SelectionUtilisateurGroupByArgs['orderBy'] }
        : { orderBy?: SelectionUtilisateurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SelectionUtilisateurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSelectionUtilisateurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SelectionUtilisateur model
   */
  readonly fields: SelectionUtilisateurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SelectionUtilisateur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SelectionUtilisateurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    commonPoint<T extends CommonPointDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommonPointDefaultArgs<ExtArgs>>): Prisma__CommonPointClient<$Result.GetResult<Prisma.$CommonPointPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SelectionUtilisateur model
   */ 
  interface SelectionUtilisateurFieldRefs {
    readonly id: FieldRef<"SelectionUtilisateur", 'Int'>
    readonly userId: FieldRef<"SelectionUtilisateur", 'Int'>
    readonly userIdSelect: FieldRef<"SelectionUtilisateur", 'Int'>
    readonly commonPointId: FieldRef<"SelectionUtilisateur", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * SelectionUtilisateur findUnique
   */
  export type SelectionUtilisateurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectionUtilisateur
     */
    select?: SelectionUtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SelectionUtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which SelectionUtilisateur to fetch.
     */
    where: SelectionUtilisateurWhereUniqueInput
  }


  /**
   * SelectionUtilisateur findUniqueOrThrow
   */
  export type SelectionUtilisateurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectionUtilisateur
     */
    select?: SelectionUtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SelectionUtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which SelectionUtilisateur to fetch.
     */
    where: SelectionUtilisateurWhereUniqueInput
  }


  /**
   * SelectionUtilisateur findFirst
   */
  export type SelectionUtilisateurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectionUtilisateur
     */
    select?: SelectionUtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SelectionUtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which SelectionUtilisateur to fetch.
     */
    where?: SelectionUtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SelectionUtilisateurs to fetch.
     */
    orderBy?: SelectionUtilisateurOrderByWithRelationInput | SelectionUtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SelectionUtilisateurs.
     */
    cursor?: SelectionUtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SelectionUtilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SelectionUtilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SelectionUtilisateurs.
     */
    distinct?: SelectionUtilisateurScalarFieldEnum | SelectionUtilisateurScalarFieldEnum[]
  }


  /**
   * SelectionUtilisateur findFirstOrThrow
   */
  export type SelectionUtilisateurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectionUtilisateur
     */
    select?: SelectionUtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SelectionUtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which SelectionUtilisateur to fetch.
     */
    where?: SelectionUtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SelectionUtilisateurs to fetch.
     */
    orderBy?: SelectionUtilisateurOrderByWithRelationInput | SelectionUtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SelectionUtilisateurs.
     */
    cursor?: SelectionUtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SelectionUtilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SelectionUtilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SelectionUtilisateurs.
     */
    distinct?: SelectionUtilisateurScalarFieldEnum | SelectionUtilisateurScalarFieldEnum[]
  }


  /**
   * SelectionUtilisateur findMany
   */
  export type SelectionUtilisateurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectionUtilisateur
     */
    select?: SelectionUtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SelectionUtilisateurInclude<ExtArgs> | null
    /**
     * Filter, which SelectionUtilisateurs to fetch.
     */
    where?: SelectionUtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SelectionUtilisateurs to fetch.
     */
    orderBy?: SelectionUtilisateurOrderByWithRelationInput | SelectionUtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SelectionUtilisateurs.
     */
    cursor?: SelectionUtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SelectionUtilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SelectionUtilisateurs.
     */
    skip?: number
    distinct?: SelectionUtilisateurScalarFieldEnum | SelectionUtilisateurScalarFieldEnum[]
  }


  /**
   * SelectionUtilisateur create
   */
  export type SelectionUtilisateurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectionUtilisateur
     */
    select?: SelectionUtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SelectionUtilisateurInclude<ExtArgs> | null
    /**
     * The data needed to create a SelectionUtilisateur.
     */
    data: XOR<SelectionUtilisateurCreateInput, SelectionUtilisateurUncheckedCreateInput>
  }


  /**
   * SelectionUtilisateur createMany
   */
  export type SelectionUtilisateurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SelectionUtilisateurs.
     */
    data: SelectionUtilisateurCreateManyInput | SelectionUtilisateurCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SelectionUtilisateur update
   */
  export type SelectionUtilisateurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectionUtilisateur
     */
    select?: SelectionUtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SelectionUtilisateurInclude<ExtArgs> | null
    /**
     * The data needed to update a SelectionUtilisateur.
     */
    data: XOR<SelectionUtilisateurUpdateInput, SelectionUtilisateurUncheckedUpdateInput>
    /**
     * Choose, which SelectionUtilisateur to update.
     */
    where: SelectionUtilisateurWhereUniqueInput
  }


  /**
   * SelectionUtilisateur updateMany
   */
  export type SelectionUtilisateurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SelectionUtilisateurs.
     */
    data: XOR<SelectionUtilisateurUpdateManyMutationInput, SelectionUtilisateurUncheckedUpdateManyInput>
    /**
     * Filter which SelectionUtilisateurs to update
     */
    where?: SelectionUtilisateurWhereInput
  }


  /**
   * SelectionUtilisateur upsert
   */
  export type SelectionUtilisateurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectionUtilisateur
     */
    select?: SelectionUtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SelectionUtilisateurInclude<ExtArgs> | null
    /**
     * The filter to search for the SelectionUtilisateur to update in case it exists.
     */
    where: SelectionUtilisateurWhereUniqueInput
    /**
     * In case the SelectionUtilisateur found by the `where` argument doesn't exist, create a new SelectionUtilisateur with this data.
     */
    create: XOR<SelectionUtilisateurCreateInput, SelectionUtilisateurUncheckedCreateInput>
    /**
     * In case the SelectionUtilisateur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SelectionUtilisateurUpdateInput, SelectionUtilisateurUncheckedUpdateInput>
  }


  /**
   * SelectionUtilisateur delete
   */
  export type SelectionUtilisateurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectionUtilisateur
     */
    select?: SelectionUtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SelectionUtilisateurInclude<ExtArgs> | null
    /**
     * Filter which SelectionUtilisateur to delete.
     */
    where: SelectionUtilisateurWhereUniqueInput
  }


  /**
   * SelectionUtilisateur deleteMany
   */
  export type SelectionUtilisateurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SelectionUtilisateurs to delete
     */
    where?: SelectionUtilisateurWhereInput
  }


  /**
   * SelectionUtilisateur without action
   */
  export type SelectionUtilisateurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectionUtilisateur
     */
    select?: SelectionUtilisateurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SelectionUtilisateurInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    prenom: 'prenom',
    email: 'email',
    tel: 'tel',
    entreprise: 'entreprise',
    poste: 'poste',
    role: 'role',
    score: 'score',
    dateInscription: 'dateInscription',
    qrCodeUrl: 'qrCodeUrl',
    qrToken: 'qrToken',
    lastLoginAt: 'lastLoginAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    status: 'status',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const CommonPointScalarFieldEnum: {
    id: 'id',
    contenu: 'contenu'
  };

  export type CommonPointScalarFieldEnum = (typeof CommonPointScalarFieldEnum)[keyof typeof CommonPointScalarFieldEnum]


  export const RankScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    score: 'score',
    position: 'position'
  };

  export type RankScalarFieldEnum = (typeof RankScalarFieldEnum)[keyof typeof RankScalarFieldEnum]


  export const SelectionUtilisateurScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    userIdSelect: 'userIdSelect',
    commonPointId: 'commonPointId'
  };

  export type SelectionUtilisateurScalarFieldEnum = (typeof SelectionUtilisateurScalarFieldEnum)[keyof typeof SelectionUtilisateurScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    nom?: StringFilter<"User"> | string
    prenom?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    tel?: StringFilter<"User"> | string
    entreprise?: StringFilter<"User"> | string
    poste?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    score?: IntFilter<"User"> | number
    dateInscription?: DateTimeFilter<"User"> | Date | string
    qrCodeUrl?: StringFilter<"User"> | string
    qrToken?: StringFilter<"User"> | string
    lastLoginAt?: DateTimeFilter<"User"> | Date | string
    sessions?: SessionListRelationFilter
    ranks?: RankListRelationFilter
    selections?: SelectionUtilisateurListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    tel?: SortOrder
    entreprise?: SortOrder
    poste?: SortOrder
    role?: SortOrder
    score?: SortOrder
    dateInscription?: SortOrder
    qrCodeUrl?: SortOrder
    qrToken?: SortOrder
    lastLoginAt?: SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    ranks?: RankOrderByRelationAggregateInput
    selections?: SelectionUtilisateurOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    qrToken?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    nom?: StringFilter<"User"> | string
    prenom?: StringFilter<"User"> | string
    tel?: StringFilter<"User"> | string
    entreprise?: StringFilter<"User"> | string
    poste?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    score?: IntFilter<"User"> | number
    dateInscription?: DateTimeFilter<"User"> | Date | string
    qrCodeUrl?: StringFilter<"User"> | string
    lastLoginAt?: DateTimeFilter<"User"> | Date | string
    sessions?: SessionListRelationFilter
    ranks?: RankListRelationFilter
    selections?: SelectionUtilisateurListRelationFilter
  }, "id" | "email" | "qrToken">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    tel?: SortOrder
    entreprise?: SortOrder
    poste?: SortOrder
    role?: SortOrder
    score?: SortOrder
    dateInscription?: SortOrder
    qrCodeUrl?: SortOrder
    qrToken?: SortOrder
    lastLoginAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    nom?: StringWithAggregatesFilter<"User"> | string
    prenom?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    tel?: StringWithAggregatesFilter<"User"> | string
    entreprise?: StringWithAggregatesFilter<"User"> | string
    poste?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    score?: IntWithAggregatesFilter<"User"> | number
    dateInscription?: DateTimeWithAggregatesFilter<"User"> | Date | string
    qrCodeUrl?: StringWithAggregatesFilter<"User"> | string
    qrToken?: StringWithAggregatesFilter<"User"> | string
    lastLoginAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: IntFilter<"Session"> | number
    status?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    userId?: IntFilter<"Session"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    status?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Session"> | number
    status?: StringWithAggregatesFilter<"Session"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    userId?: IntWithAggregatesFilter<"Session"> | number
  }

  export type CommonPointWhereInput = {
    AND?: CommonPointWhereInput | CommonPointWhereInput[]
    OR?: CommonPointWhereInput[]
    NOT?: CommonPointWhereInput | CommonPointWhereInput[]
    id?: IntFilter<"CommonPoint"> | number
    contenu?: StringFilter<"CommonPoint"> | string
    selections?: SelectionUtilisateurListRelationFilter
  }

  export type CommonPointOrderByWithRelationInput = {
    id?: SortOrder
    contenu?: SortOrder
    selections?: SelectionUtilisateurOrderByRelationAggregateInput
  }

  export type CommonPointWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommonPointWhereInput | CommonPointWhereInput[]
    OR?: CommonPointWhereInput[]
    NOT?: CommonPointWhereInput | CommonPointWhereInput[]
    contenu?: StringFilter<"CommonPoint"> | string
    selections?: SelectionUtilisateurListRelationFilter
  }, "id">

  export type CommonPointOrderByWithAggregationInput = {
    id?: SortOrder
    contenu?: SortOrder
    _count?: CommonPointCountOrderByAggregateInput
    _avg?: CommonPointAvgOrderByAggregateInput
    _max?: CommonPointMaxOrderByAggregateInput
    _min?: CommonPointMinOrderByAggregateInput
    _sum?: CommonPointSumOrderByAggregateInput
  }

  export type CommonPointScalarWhereWithAggregatesInput = {
    AND?: CommonPointScalarWhereWithAggregatesInput | CommonPointScalarWhereWithAggregatesInput[]
    OR?: CommonPointScalarWhereWithAggregatesInput[]
    NOT?: CommonPointScalarWhereWithAggregatesInput | CommonPointScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CommonPoint"> | number
    contenu?: StringWithAggregatesFilter<"CommonPoint"> | string
  }

  export type RankWhereInput = {
    AND?: RankWhereInput | RankWhereInput[]
    OR?: RankWhereInput[]
    NOT?: RankWhereInput | RankWhereInput[]
    id?: IntFilter<"Rank"> | number
    userId?: IntFilter<"Rank"> | number
    score?: IntFilter<"Rank"> | number
    position?: IntFilter<"Rank"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RankOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    score?: SortOrder
    position?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RankWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: RankWhereInput | RankWhereInput[]
    OR?: RankWhereInput[]
    NOT?: RankWhereInput | RankWhereInput[]
    score?: IntFilter<"Rank"> | number
    position?: IntFilter<"Rank"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type RankOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    score?: SortOrder
    position?: SortOrder
    _count?: RankCountOrderByAggregateInput
    _avg?: RankAvgOrderByAggregateInput
    _max?: RankMaxOrderByAggregateInput
    _min?: RankMinOrderByAggregateInput
    _sum?: RankSumOrderByAggregateInput
  }

  export type RankScalarWhereWithAggregatesInput = {
    AND?: RankScalarWhereWithAggregatesInput | RankScalarWhereWithAggregatesInput[]
    OR?: RankScalarWhereWithAggregatesInput[]
    NOT?: RankScalarWhereWithAggregatesInput | RankScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Rank"> | number
    userId?: IntWithAggregatesFilter<"Rank"> | number
    score?: IntWithAggregatesFilter<"Rank"> | number
    position?: IntWithAggregatesFilter<"Rank"> | number
  }

  export type SelectionUtilisateurWhereInput = {
    AND?: SelectionUtilisateurWhereInput | SelectionUtilisateurWhereInput[]
    OR?: SelectionUtilisateurWhereInput[]
    NOT?: SelectionUtilisateurWhereInput | SelectionUtilisateurWhereInput[]
    id?: IntFilter<"SelectionUtilisateur"> | number
    userId?: IntFilter<"SelectionUtilisateur"> | number
    userIdSelect?: IntFilter<"SelectionUtilisateur"> | number
    commonPointId?: IntFilter<"SelectionUtilisateur"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    commonPoint?: XOR<CommonPointRelationFilter, CommonPointWhereInput>
  }

  export type SelectionUtilisateurOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    userIdSelect?: SortOrder
    commonPointId?: SortOrder
    user?: UserOrderByWithRelationInput
    commonPoint?: CommonPointOrderByWithRelationInput
  }

  export type SelectionUtilisateurWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SelectionUtilisateurWhereInput | SelectionUtilisateurWhereInput[]
    OR?: SelectionUtilisateurWhereInput[]
    NOT?: SelectionUtilisateurWhereInput | SelectionUtilisateurWhereInput[]
    userId?: IntFilter<"SelectionUtilisateur"> | number
    userIdSelect?: IntFilter<"SelectionUtilisateur"> | number
    commonPointId?: IntFilter<"SelectionUtilisateur"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    commonPoint?: XOR<CommonPointRelationFilter, CommonPointWhereInput>
  }, "id">

  export type SelectionUtilisateurOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    userIdSelect?: SortOrder
    commonPointId?: SortOrder
    _count?: SelectionUtilisateurCountOrderByAggregateInput
    _avg?: SelectionUtilisateurAvgOrderByAggregateInput
    _max?: SelectionUtilisateurMaxOrderByAggregateInput
    _min?: SelectionUtilisateurMinOrderByAggregateInput
    _sum?: SelectionUtilisateurSumOrderByAggregateInput
  }

  export type SelectionUtilisateurScalarWhereWithAggregatesInput = {
    AND?: SelectionUtilisateurScalarWhereWithAggregatesInput | SelectionUtilisateurScalarWhereWithAggregatesInput[]
    OR?: SelectionUtilisateurScalarWhereWithAggregatesInput[]
    NOT?: SelectionUtilisateurScalarWhereWithAggregatesInput | SelectionUtilisateurScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SelectionUtilisateur"> | number
    userId?: IntWithAggregatesFilter<"SelectionUtilisateur"> | number
    userIdSelect?: IntWithAggregatesFilter<"SelectionUtilisateur"> | number
    commonPointId?: IntWithAggregatesFilter<"SelectionUtilisateur"> | number
  }

  export type UserCreateInput = {
    nom: string
    prenom: string
    email: string
    tel: string
    entreprise: string
    poste: string
    role?: string
    score?: number
    dateInscription?: Date | string
    qrCodeUrl: string
    qrToken: string
    lastLoginAt: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    ranks?: RankCreateNestedManyWithoutUserInput
    selections?: SelectionUtilisateurCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    tel: string
    entreprise: string
    poste: string
    role?: string
    score?: number
    dateInscription?: Date | string
    qrCodeUrl: string
    qrToken: string
    lastLoginAt: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    ranks?: RankUncheckedCreateNestedManyWithoutUserInput
    selections?: SelectionUtilisateurUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    entreprise?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCodeUrl?: StringFieldUpdateOperationsInput | string
    qrToken?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    ranks?: RankUpdateManyWithoutUserNestedInput
    selections?: SelectionUtilisateurUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    entreprise?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCodeUrl?: StringFieldUpdateOperationsInput | string
    qrToken?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    ranks?: RankUncheckedUpdateManyWithoutUserNestedInput
    selections?: SelectionUtilisateurUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    tel: string
    entreprise: string
    poste: string
    role?: string
    score?: number
    dateInscription?: Date | string
    qrCodeUrl: string
    qrToken: string
    lastLoginAt: Date | string
  }

  export type UserUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    entreprise?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCodeUrl?: StringFieldUpdateOperationsInput | string
    qrToken?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    entreprise?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCodeUrl?: StringFieldUpdateOperationsInput | string
    qrToken?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    status?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    status?: string
    createdAt?: Date | string
    userId: number
  }

  export type SessionUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type SessionCreateManyInput = {
    id?: number
    status?: string
    createdAt?: Date | string
    userId: number
  }

  export type SessionUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CommonPointCreateInput = {
    contenu: string
    selections?: SelectionUtilisateurCreateNestedManyWithoutCommonPointInput
  }

  export type CommonPointUncheckedCreateInput = {
    id?: number
    contenu: string
    selections?: SelectionUtilisateurUncheckedCreateNestedManyWithoutCommonPointInput
  }

  export type CommonPointUpdateInput = {
    contenu?: StringFieldUpdateOperationsInput | string
    selections?: SelectionUtilisateurUpdateManyWithoutCommonPointNestedInput
  }

  export type CommonPointUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    contenu?: StringFieldUpdateOperationsInput | string
    selections?: SelectionUtilisateurUncheckedUpdateManyWithoutCommonPointNestedInput
  }

  export type CommonPointCreateManyInput = {
    id?: number
    contenu: string
  }

  export type CommonPointUpdateManyMutationInput = {
    contenu?: StringFieldUpdateOperationsInput | string
  }

  export type CommonPointUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    contenu?: StringFieldUpdateOperationsInput | string
  }

  export type RankCreateInput = {
    score: number
    position: number
    user: UserCreateNestedOneWithoutRanksInput
  }

  export type RankUncheckedCreateInput = {
    id?: number
    userId: number
    score: number
    position: number
  }

  export type RankUpdateInput = {
    score?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutRanksNestedInput
  }

  export type RankUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type RankCreateManyInput = {
    id?: number
    userId: number
    score: number
    position: number
  }

  export type RankUpdateManyMutationInput = {
    score?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type RankUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type SelectionUtilisateurCreateInput = {
    userIdSelect: number
    user: UserCreateNestedOneWithoutSelectionsInput
    commonPoint: CommonPointCreateNestedOneWithoutSelectionsInput
  }

  export type SelectionUtilisateurUncheckedCreateInput = {
    id?: number
    userId: number
    userIdSelect: number
    commonPointId: number
  }

  export type SelectionUtilisateurUpdateInput = {
    userIdSelect?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutSelectionsNestedInput
    commonPoint?: CommonPointUpdateOneRequiredWithoutSelectionsNestedInput
  }

  export type SelectionUtilisateurUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userIdSelect?: IntFieldUpdateOperationsInput | number
    commonPointId?: IntFieldUpdateOperationsInput | number
  }

  export type SelectionUtilisateurCreateManyInput = {
    id?: number
    userId: number
    userIdSelect: number
    commonPointId: number
  }

  export type SelectionUtilisateurUpdateManyMutationInput = {
    userIdSelect?: IntFieldUpdateOperationsInput | number
  }

  export type SelectionUtilisateurUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userIdSelect?: IntFieldUpdateOperationsInput | number
    commonPointId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type RankListRelationFilter = {
    every?: RankWhereInput
    some?: RankWhereInput
    none?: RankWhereInput
  }

  export type SelectionUtilisateurListRelationFilter = {
    every?: SelectionUtilisateurWhereInput
    some?: SelectionUtilisateurWhereInput
    none?: SelectionUtilisateurWhereInput
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RankOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SelectionUtilisateurOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    tel?: SortOrder
    entreprise?: SortOrder
    poste?: SortOrder
    role?: SortOrder
    score?: SortOrder
    dateInscription?: SortOrder
    qrCodeUrl?: SortOrder
    qrToken?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    tel?: SortOrder
    entreprise?: SortOrder
    poste?: SortOrder
    role?: SortOrder
    score?: SortOrder
    dateInscription?: SortOrder
    qrCodeUrl?: SortOrder
    qrToken?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    tel?: SortOrder
    entreprise?: SortOrder
    poste?: SortOrder
    role?: SortOrder
    score?: SortOrder
    dateInscription?: SortOrder
    qrCodeUrl?: SortOrder
    qrToken?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type CommonPointCountOrderByAggregateInput = {
    id?: SortOrder
    contenu?: SortOrder
  }

  export type CommonPointAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CommonPointMaxOrderByAggregateInput = {
    id?: SortOrder
    contenu?: SortOrder
  }

  export type CommonPointMinOrderByAggregateInput = {
    id?: SortOrder
    contenu?: SortOrder
  }

  export type CommonPointSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RankCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    score?: SortOrder
    position?: SortOrder
  }

  export type RankAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    score?: SortOrder
    position?: SortOrder
  }

  export type RankMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    score?: SortOrder
    position?: SortOrder
  }

  export type RankMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    score?: SortOrder
    position?: SortOrder
  }

  export type RankSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    score?: SortOrder
    position?: SortOrder
  }

  export type CommonPointRelationFilter = {
    is?: CommonPointWhereInput
    isNot?: CommonPointWhereInput
  }

  export type SelectionUtilisateurCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userIdSelect?: SortOrder
    commonPointId?: SortOrder
  }

  export type SelectionUtilisateurAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userIdSelect?: SortOrder
    commonPointId?: SortOrder
  }

  export type SelectionUtilisateurMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userIdSelect?: SortOrder
    commonPointId?: SortOrder
  }

  export type SelectionUtilisateurMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userIdSelect?: SortOrder
    commonPointId?: SortOrder
  }

  export type SelectionUtilisateurSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userIdSelect?: SortOrder
    commonPointId?: SortOrder
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type RankCreateNestedManyWithoutUserInput = {
    create?: XOR<RankCreateWithoutUserInput, RankUncheckedCreateWithoutUserInput> | RankCreateWithoutUserInput[] | RankUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RankCreateOrConnectWithoutUserInput | RankCreateOrConnectWithoutUserInput[]
    createMany?: RankCreateManyUserInputEnvelope
    connect?: RankWhereUniqueInput | RankWhereUniqueInput[]
  }

  export type SelectionUtilisateurCreateNestedManyWithoutUserInput = {
    create?: XOR<SelectionUtilisateurCreateWithoutUserInput, SelectionUtilisateurUncheckedCreateWithoutUserInput> | SelectionUtilisateurCreateWithoutUserInput[] | SelectionUtilisateurUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SelectionUtilisateurCreateOrConnectWithoutUserInput | SelectionUtilisateurCreateOrConnectWithoutUserInput[]
    createMany?: SelectionUtilisateurCreateManyUserInputEnvelope
    connect?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type RankUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RankCreateWithoutUserInput, RankUncheckedCreateWithoutUserInput> | RankCreateWithoutUserInput[] | RankUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RankCreateOrConnectWithoutUserInput | RankCreateOrConnectWithoutUserInput[]
    createMany?: RankCreateManyUserInputEnvelope
    connect?: RankWhereUniqueInput | RankWhereUniqueInput[]
  }

  export type SelectionUtilisateurUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SelectionUtilisateurCreateWithoutUserInput, SelectionUtilisateurUncheckedCreateWithoutUserInput> | SelectionUtilisateurCreateWithoutUserInput[] | SelectionUtilisateurUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SelectionUtilisateurCreateOrConnectWithoutUserInput | SelectionUtilisateurCreateOrConnectWithoutUserInput[]
    createMany?: SelectionUtilisateurCreateManyUserInputEnvelope
    connect?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type RankUpdateManyWithoutUserNestedInput = {
    create?: XOR<RankCreateWithoutUserInput, RankUncheckedCreateWithoutUserInput> | RankCreateWithoutUserInput[] | RankUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RankCreateOrConnectWithoutUserInput | RankCreateOrConnectWithoutUserInput[]
    upsert?: RankUpsertWithWhereUniqueWithoutUserInput | RankUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RankCreateManyUserInputEnvelope
    set?: RankWhereUniqueInput | RankWhereUniqueInput[]
    disconnect?: RankWhereUniqueInput | RankWhereUniqueInput[]
    delete?: RankWhereUniqueInput | RankWhereUniqueInput[]
    connect?: RankWhereUniqueInput | RankWhereUniqueInput[]
    update?: RankUpdateWithWhereUniqueWithoutUserInput | RankUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RankUpdateManyWithWhereWithoutUserInput | RankUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RankScalarWhereInput | RankScalarWhereInput[]
  }

  export type SelectionUtilisateurUpdateManyWithoutUserNestedInput = {
    create?: XOR<SelectionUtilisateurCreateWithoutUserInput, SelectionUtilisateurUncheckedCreateWithoutUserInput> | SelectionUtilisateurCreateWithoutUserInput[] | SelectionUtilisateurUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SelectionUtilisateurCreateOrConnectWithoutUserInput | SelectionUtilisateurCreateOrConnectWithoutUserInput[]
    upsert?: SelectionUtilisateurUpsertWithWhereUniqueWithoutUserInput | SelectionUtilisateurUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SelectionUtilisateurCreateManyUserInputEnvelope
    set?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
    disconnect?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
    delete?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
    connect?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
    update?: SelectionUtilisateurUpdateWithWhereUniqueWithoutUserInput | SelectionUtilisateurUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SelectionUtilisateurUpdateManyWithWhereWithoutUserInput | SelectionUtilisateurUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SelectionUtilisateurScalarWhereInput | SelectionUtilisateurScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type RankUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RankCreateWithoutUserInput, RankUncheckedCreateWithoutUserInput> | RankCreateWithoutUserInput[] | RankUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RankCreateOrConnectWithoutUserInput | RankCreateOrConnectWithoutUserInput[]
    upsert?: RankUpsertWithWhereUniqueWithoutUserInput | RankUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RankCreateManyUserInputEnvelope
    set?: RankWhereUniqueInput | RankWhereUniqueInput[]
    disconnect?: RankWhereUniqueInput | RankWhereUniqueInput[]
    delete?: RankWhereUniqueInput | RankWhereUniqueInput[]
    connect?: RankWhereUniqueInput | RankWhereUniqueInput[]
    update?: RankUpdateWithWhereUniqueWithoutUserInput | RankUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RankUpdateManyWithWhereWithoutUserInput | RankUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RankScalarWhereInput | RankScalarWhereInput[]
  }

  export type SelectionUtilisateurUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SelectionUtilisateurCreateWithoutUserInput, SelectionUtilisateurUncheckedCreateWithoutUserInput> | SelectionUtilisateurCreateWithoutUserInput[] | SelectionUtilisateurUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SelectionUtilisateurCreateOrConnectWithoutUserInput | SelectionUtilisateurCreateOrConnectWithoutUserInput[]
    upsert?: SelectionUtilisateurUpsertWithWhereUniqueWithoutUserInput | SelectionUtilisateurUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SelectionUtilisateurCreateManyUserInputEnvelope
    set?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
    disconnect?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
    delete?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
    connect?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
    update?: SelectionUtilisateurUpdateWithWhereUniqueWithoutUserInput | SelectionUtilisateurUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SelectionUtilisateurUpdateManyWithWhereWithoutUserInput | SelectionUtilisateurUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SelectionUtilisateurScalarWhereInput | SelectionUtilisateurScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type SelectionUtilisateurCreateNestedManyWithoutCommonPointInput = {
    create?: XOR<SelectionUtilisateurCreateWithoutCommonPointInput, SelectionUtilisateurUncheckedCreateWithoutCommonPointInput> | SelectionUtilisateurCreateWithoutCommonPointInput[] | SelectionUtilisateurUncheckedCreateWithoutCommonPointInput[]
    connectOrCreate?: SelectionUtilisateurCreateOrConnectWithoutCommonPointInput | SelectionUtilisateurCreateOrConnectWithoutCommonPointInput[]
    createMany?: SelectionUtilisateurCreateManyCommonPointInputEnvelope
    connect?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
  }

  export type SelectionUtilisateurUncheckedCreateNestedManyWithoutCommonPointInput = {
    create?: XOR<SelectionUtilisateurCreateWithoutCommonPointInput, SelectionUtilisateurUncheckedCreateWithoutCommonPointInput> | SelectionUtilisateurCreateWithoutCommonPointInput[] | SelectionUtilisateurUncheckedCreateWithoutCommonPointInput[]
    connectOrCreate?: SelectionUtilisateurCreateOrConnectWithoutCommonPointInput | SelectionUtilisateurCreateOrConnectWithoutCommonPointInput[]
    createMany?: SelectionUtilisateurCreateManyCommonPointInputEnvelope
    connect?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
  }

  export type SelectionUtilisateurUpdateManyWithoutCommonPointNestedInput = {
    create?: XOR<SelectionUtilisateurCreateWithoutCommonPointInput, SelectionUtilisateurUncheckedCreateWithoutCommonPointInput> | SelectionUtilisateurCreateWithoutCommonPointInput[] | SelectionUtilisateurUncheckedCreateWithoutCommonPointInput[]
    connectOrCreate?: SelectionUtilisateurCreateOrConnectWithoutCommonPointInput | SelectionUtilisateurCreateOrConnectWithoutCommonPointInput[]
    upsert?: SelectionUtilisateurUpsertWithWhereUniqueWithoutCommonPointInput | SelectionUtilisateurUpsertWithWhereUniqueWithoutCommonPointInput[]
    createMany?: SelectionUtilisateurCreateManyCommonPointInputEnvelope
    set?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
    disconnect?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
    delete?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
    connect?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
    update?: SelectionUtilisateurUpdateWithWhereUniqueWithoutCommonPointInput | SelectionUtilisateurUpdateWithWhereUniqueWithoutCommonPointInput[]
    updateMany?: SelectionUtilisateurUpdateManyWithWhereWithoutCommonPointInput | SelectionUtilisateurUpdateManyWithWhereWithoutCommonPointInput[]
    deleteMany?: SelectionUtilisateurScalarWhereInput | SelectionUtilisateurScalarWhereInput[]
  }

  export type SelectionUtilisateurUncheckedUpdateManyWithoutCommonPointNestedInput = {
    create?: XOR<SelectionUtilisateurCreateWithoutCommonPointInput, SelectionUtilisateurUncheckedCreateWithoutCommonPointInput> | SelectionUtilisateurCreateWithoutCommonPointInput[] | SelectionUtilisateurUncheckedCreateWithoutCommonPointInput[]
    connectOrCreate?: SelectionUtilisateurCreateOrConnectWithoutCommonPointInput | SelectionUtilisateurCreateOrConnectWithoutCommonPointInput[]
    upsert?: SelectionUtilisateurUpsertWithWhereUniqueWithoutCommonPointInput | SelectionUtilisateurUpsertWithWhereUniqueWithoutCommonPointInput[]
    createMany?: SelectionUtilisateurCreateManyCommonPointInputEnvelope
    set?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
    disconnect?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
    delete?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
    connect?: SelectionUtilisateurWhereUniqueInput | SelectionUtilisateurWhereUniqueInput[]
    update?: SelectionUtilisateurUpdateWithWhereUniqueWithoutCommonPointInput | SelectionUtilisateurUpdateWithWhereUniqueWithoutCommonPointInput[]
    updateMany?: SelectionUtilisateurUpdateManyWithWhereWithoutCommonPointInput | SelectionUtilisateurUpdateManyWithWhereWithoutCommonPointInput[]
    deleteMany?: SelectionUtilisateurScalarWhereInput | SelectionUtilisateurScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRanksInput = {
    create?: XOR<UserCreateWithoutRanksInput, UserUncheckedCreateWithoutRanksInput>
    connectOrCreate?: UserCreateOrConnectWithoutRanksInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRanksNestedInput = {
    create?: XOR<UserCreateWithoutRanksInput, UserUncheckedCreateWithoutRanksInput>
    connectOrCreate?: UserCreateOrConnectWithoutRanksInput
    upsert?: UserUpsertWithoutRanksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRanksInput, UserUpdateWithoutRanksInput>, UserUncheckedUpdateWithoutRanksInput>
  }

  export type UserCreateNestedOneWithoutSelectionsInput = {
    create?: XOR<UserCreateWithoutSelectionsInput, UserUncheckedCreateWithoutSelectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSelectionsInput
    connect?: UserWhereUniqueInput
  }

  export type CommonPointCreateNestedOneWithoutSelectionsInput = {
    create?: XOR<CommonPointCreateWithoutSelectionsInput, CommonPointUncheckedCreateWithoutSelectionsInput>
    connectOrCreate?: CommonPointCreateOrConnectWithoutSelectionsInput
    connect?: CommonPointWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSelectionsNestedInput = {
    create?: XOR<UserCreateWithoutSelectionsInput, UserUncheckedCreateWithoutSelectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSelectionsInput
    upsert?: UserUpsertWithoutSelectionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSelectionsInput, UserUpdateWithoutSelectionsInput>, UserUncheckedUpdateWithoutSelectionsInput>
  }

  export type CommonPointUpdateOneRequiredWithoutSelectionsNestedInput = {
    create?: XOR<CommonPointCreateWithoutSelectionsInput, CommonPointUncheckedCreateWithoutSelectionsInput>
    connectOrCreate?: CommonPointCreateOrConnectWithoutSelectionsInput
    upsert?: CommonPointUpsertWithoutSelectionsInput
    connect?: CommonPointWhereUniqueInput
    update?: XOR<XOR<CommonPointUpdateToOneWithWhereWithoutSelectionsInput, CommonPointUpdateWithoutSelectionsInput>, CommonPointUncheckedUpdateWithoutSelectionsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SessionCreateWithoutUserInput = {
    status?: string
    createdAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: number
    status?: string
    createdAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RankCreateWithoutUserInput = {
    score: number
    position: number
  }

  export type RankUncheckedCreateWithoutUserInput = {
    id?: number
    score: number
    position: number
  }

  export type RankCreateOrConnectWithoutUserInput = {
    where: RankWhereUniqueInput
    create: XOR<RankCreateWithoutUserInput, RankUncheckedCreateWithoutUserInput>
  }

  export type RankCreateManyUserInputEnvelope = {
    data: RankCreateManyUserInput | RankCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SelectionUtilisateurCreateWithoutUserInput = {
    userIdSelect: number
    commonPoint: CommonPointCreateNestedOneWithoutSelectionsInput
  }

  export type SelectionUtilisateurUncheckedCreateWithoutUserInput = {
    id?: number
    userIdSelect: number
    commonPointId: number
  }

  export type SelectionUtilisateurCreateOrConnectWithoutUserInput = {
    where: SelectionUtilisateurWhereUniqueInput
    create: XOR<SelectionUtilisateurCreateWithoutUserInput, SelectionUtilisateurUncheckedCreateWithoutUserInput>
  }

  export type SelectionUtilisateurCreateManyUserInputEnvelope = {
    data: SelectionUtilisateurCreateManyUserInput | SelectionUtilisateurCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: IntFilter<"Session"> | number
    status?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    userId?: IntFilter<"Session"> | number
  }

  export type RankUpsertWithWhereUniqueWithoutUserInput = {
    where: RankWhereUniqueInput
    update: XOR<RankUpdateWithoutUserInput, RankUncheckedUpdateWithoutUserInput>
    create: XOR<RankCreateWithoutUserInput, RankUncheckedCreateWithoutUserInput>
  }

  export type RankUpdateWithWhereUniqueWithoutUserInput = {
    where: RankWhereUniqueInput
    data: XOR<RankUpdateWithoutUserInput, RankUncheckedUpdateWithoutUserInput>
  }

  export type RankUpdateManyWithWhereWithoutUserInput = {
    where: RankScalarWhereInput
    data: XOR<RankUpdateManyMutationInput, RankUncheckedUpdateManyWithoutUserInput>
  }

  export type RankScalarWhereInput = {
    AND?: RankScalarWhereInput | RankScalarWhereInput[]
    OR?: RankScalarWhereInput[]
    NOT?: RankScalarWhereInput | RankScalarWhereInput[]
    id?: IntFilter<"Rank"> | number
    userId?: IntFilter<"Rank"> | number
    score?: IntFilter<"Rank"> | number
    position?: IntFilter<"Rank"> | number
  }

  export type SelectionUtilisateurUpsertWithWhereUniqueWithoutUserInput = {
    where: SelectionUtilisateurWhereUniqueInput
    update: XOR<SelectionUtilisateurUpdateWithoutUserInput, SelectionUtilisateurUncheckedUpdateWithoutUserInput>
    create: XOR<SelectionUtilisateurCreateWithoutUserInput, SelectionUtilisateurUncheckedCreateWithoutUserInput>
  }

  export type SelectionUtilisateurUpdateWithWhereUniqueWithoutUserInput = {
    where: SelectionUtilisateurWhereUniqueInput
    data: XOR<SelectionUtilisateurUpdateWithoutUserInput, SelectionUtilisateurUncheckedUpdateWithoutUserInput>
  }

  export type SelectionUtilisateurUpdateManyWithWhereWithoutUserInput = {
    where: SelectionUtilisateurScalarWhereInput
    data: XOR<SelectionUtilisateurUpdateManyMutationInput, SelectionUtilisateurUncheckedUpdateManyWithoutUserInput>
  }

  export type SelectionUtilisateurScalarWhereInput = {
    AND?: SelectionUtilisateurScalarWhereInput | SelectionUtilisateurScalarWhereInput[]
    OR?: SelectionUtilisateurScalarWhereInput[]
    NOT?: SelectionUtilisateurScalarWhereInput | SelectionUtilisateurScalarWhereInput[]
    id?: IntFilter<"SelectionUtilisateur"> | number
    userId?: IntFilter<"SelectionUtilisateur"> | number
    userIdSelect?: IntFilter<"SelectionUtilisateur"> | number
    commonPointId?: IntFilter<"SelectionUtilisateur"> | number
  }

  export type UserCreateWithoutSessionsInput = {
    nom: string
    prenom: string
    email: string
    tel: string
    entreprise: string
    poste: string
    role?: string
    score?: number
    dateInscription?: Date | string
    qrCodeUrl: string
    qrToken: string
    lastLoginAt: Date | string
    ranks?: RankCreateNestedManyWithoutUserInput
    selections?: SelectionUtilisateurCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    tel: string
    entreprise: string
    poste: string
    role?: string
    score?: number
    dateInscription?: Date | string
    qrCodeUrl: string
    qrToken: string
    lastLoginAt: Date | string
    ranks?: RankUncheckedCreateNestedManyWithoutUserInput
    selections?: SelectionUtilisateurUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    entreprise?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCodeUrl?: StringFieldUpdateOperationsInput | string
    qrToken?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ranks?: RankUpdateManyWithoutUserNestedInput
    selections?: SelectionUtilisateurUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    entreprise?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCodeUrl?: StringFieldUpdateOperationsInput | string
    qrToken?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ranks?: RankUncheckedUpdateManyWithoutUserNestedInput
    selections?: SelectionUtilisateurUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SelectionUtilisateurCreateWithoutCommonPointInput = {
    userIdSelect: number
    user: UserCreateNestedOneWithoutSelectionsInput
  }

  export type SelectionUtilisateurUncheckedCreateWithoutCommonPointInput = {
    id?: number
    userId: number
    userIdSelect: number
  }

  export type SelectionUtilisateurCreateOrConnectWithoutCommonPointInput = {
    where: SelectionUtilisateurWhereUniqueInput
    create: XOR<SelectionUtilisateurCreateWithoutCommonPointInput, SelectionUtilisateurUncheckedCreateWithoutCommonPointInput>
  }

  export type SelectionUtilisateurCreateManyCommonPointInputEnvelope = {
    data: SelectionUtilisateurCreateManyCommonPointInput | SelectionUtilisateurCreateManyCommonPointInput[]
    skipDuplicates?: boolean
  }

  export type SelectionUtilisateurUpsertWithWhereUniqueWithoutCommonPointInput = {
    where: SelectionUtilisateurWhereUniqueInput
    update: XOR<SelectionUtilisateurUpdateWithoutCommonPointInput, SelectionUtilisateurUncheckedUpdateWithoutCommonPointInput>
    create: XOR<SelectionUtilisateurCreateWithoutCommonPointInput, SelectionUtilisateurUncheckedCreateWithoutCommonPointInput>
  }

  export type SelectionUtilisateurUpdateWithWhereUniqueWithoutCommonPointInput = {
    where: SelectionUtilisateurWhereUniqueInput
    data: XOR<SelectionUtilisateurUpdateWithoutCommonPointInput, SelectionUtilisateurUncheckedUpdateWithoutCommonPointInput>
  }

  export type SelectionUtilisateurUpdateManyWithWhereWithoutCommonPointInput = {
    where: SelectionUtilisateurScalarWhereInput
    data: XOR<SelectionUtilisateurUpdateManyMutationInput, SelectionUtilisateurUncheckedUpdateManyWithoutCommonPointInput>
  }

  export type UserCreateWithoutRanksInput = {
    nom: string
    prenom: string
    email: string
    tel: string
    entreprise: string
    poste: string
    role?: string
    score?: number
    dateInscription?: Date | string
    qrCodeUrl: string
    qrToken: string
    lastLoginAt: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    selections?: SelectionUtilisateurCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRanksInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    tel: string
    entreprise: string
    poste: string
    role?: string
    score?: number
    dateInscription?: Date | string
    qrCodeUrl: string
    qrToken: string
    lastLoginAt: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    selections?: SelectionUtilisateurUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRanksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRanksInput, UserUncheckedCreateWithoutRanksInput>
  }

  export type UserUpsertWithoutRanksInput = {
    update: XOR<UserUpdateWithoutRanksInput, UserUncheckedUpdateWithoutRanksInput>
    create: XOR<UserCreateWithoutRanksInput, UserUncheckedCreateWithoutRanksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRanksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRanksInput, UserUncheckedUpdateWithoutRanksInput>
  }

  export type UserUpdateWithoutRanksInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    entreprise?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCodeUrl?: StringFieldUpdateOperationsInput | string
    qrToken?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    selections?: SelectionUtilisateurUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRanksInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    entreprise?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCodeUrl?: StringFieldUpdateOperationsInput | string
    qrToken?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    selections?: SelectionUtilisateurUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSelectionsInput = {
    nom: string
    prenom: string
    email: string
    tel: string
    entreprise: string
    poste: string
    role?: string
    score?: number
    dateInscription?: Date | string
    qrCodeUrl: string
    qrToken: string
    lastLoginAt: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    ranks?: RankCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSelectionsInput = {
    id?: number
    nom: string
    prenom: string
    email: string
    tel: string
    entreprise: string
    poste: string
    role?: string
    score?: number
    dateInscription?: Date | string
    qrCodeUrl: string
    qrToken: string
    lastLoginAt: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    ranks?: RankUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSelectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSelectionsInput, UserUncheckedCreateWithoutSelectionsInput>
  }

  export type CommonPointCreateWithoutSelectionsInput = {
    contenu: string
  }

  export type CommonPointUncheckedCreateWithoutSelectionsInput = {
    id?: number
    contenu: string
  }

  export type CommonPointCreateOrConnectWithoutSelectionsInput = {
    where: CommonPointWhereUniqueInput
    create: XOR<CommonPointCreateWithoutSelectionsInput, CommonPointUncheckedCreateWithoutSelectionsInput>
  }

  export type UserUpsertWithoutSelectionsInput = {
    update: XOR<UserUpdateWithoutSelectionsInput, UserUncheckedUpdateWithoutSelectionsInput>
    create: XOR<UserCreateWithoutSelectionsInput, UserUncheckedCreateWithoutSelectionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSelectionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSelectionsInput, UserUncheckedUpdateWithoutSelectionsInput>
  }

  export type UserUpdateWithoutSelectionsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    entreprise?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCodeUrl?: StringFieldUpdateOperationsInput | string
    qrToken?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    ranks?: RankUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSelectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    entreprise?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCodeUrl?: StringFieldUpdateOperationsInput | string
    qrToken?: StringFieldUpdateOperationsInput | string
    lastLoginAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    ranks?: RankUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommonPointUpsertWithoutSelectionsInput = {
    update: XOR<CommonPointUpdateWithoutSelectionsInput, CommonPointUncheckedUpdateWithoutSelectionsInput>
    create: XOR<CommonPointCreateWithoutSelectionsInput, CommonPointUncheckedCreateWithoutSelectionsInput>
    where?: CommonPointWhereInput
  }

  export type CommonPointUpdateToOneWithWhereWithoutSelectionsInput = {
    where?: CommonPointWhereInput
    data: XOR<CommonPointUpdateWithoutSelectionsInput, CommonPointUncheckedUpdateWithoutSelectionsInput>
  }

  export type CommonPointUpdateWithoutSelectionsInput = {
    contenu?: StringFieldUpdateOperationsInput | string
  }

  export type CommonPointUncheckedUpdateWithoutSelectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    contenu?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateManyUserInput = {
    id?: number
    status?: string
    createdAt?: Date | string
  }

  export type RankCreateManyUserInput = {
    id?: number
    score: number
    position: number
  }

  export type SelectionUtilisateurCreateManyUserInput = {
    id?: number
    userIdSelect: number
    commonPointId: number
  }

  export type SessionUpdateWithoutUserInput = {
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankUpdateWithoutUserInput = {
    score?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type RankUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type RankUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type SelectionUtilisateurUpdateWithoutUserInput = {
    userIdSelect?: IntFieldUpdateOperationsInput | number
    commonPoint?: CommonPointUpdateOneRequiredWithoutSelectionsNestedInput
  }

  export type SelectionUtilisateurUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    userIdSelect?: IntFieldUpdateOperationsInput | number
    commonPointId?: IntFieldUpdateOperationsInput | number
  }

  export type SelectionUtilisateurUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    userIdSelect?: IntFieldUpdateOperationsInput | number
    commonPointId?: IntFieldUpdateOperationsInput | number
  }

  export type SelectionUtilisateurCreateManyCommonPointInput = {
    id?: number
    userId: number
    userIdSelect: number
  }

  export type SelectionUtilisateurUpdateWithoutCommonPointInput = {
    userIdSelect?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutSelectionsNestedInput
  }

  export type SelectionUtilisateurUncheckedUpdateWithoutCommonPointInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userIdSelect?: IntFieldUpdateOperationsInput | number
  }

  export type SelectionUtilisateurUncheckedUpdateManyWithoutCommonPointInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userIdSelect?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommonPointCountOutputTypeDefaultArgs instead
     */
    export type CommonPointCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommonPointCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommonPointDefaultArgs instead
     */
    export type CommonPointArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommonPointDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RankDefaultArgs instead
     */
    export type RankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RankDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SelectionUtilisateurDefaultArgs instead
     */
    export type SelectionUtilisateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SelectionUtilisateurDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}